{
  "version": 3,
  "sources": ["../../lit-element-router/utility/router-utility.js", "../../lit-element-router/lit-element-router.js"],
  "sourcesContent": ["export function stripExtraTrailingSlash(str) {\n    while (str.length !== 1 && str.substr(-1) === '/') {\n        str = str.substr(0, str.length - 1);\n    }\n    return str;\n}\n\nexport function parseQuery(querystring) {\n    return querystring ? JSON.parse('{\"' + querystring.substring(1).replace(/&/g, '\",\"').replace(/=/g, '\":\"') + '\"}') : {}\n}\n\nexport function parseParams(pattern, uri) {\n    let params = {}\n\n    const patternArray = pattern.split('/').filter((path) => { return path != '' })\n    const uriArray = uri.split('/').filter((path) => { return path != '' })\n\n    patternArray.map((pattern, i) => {\n        if (/^:/.test(pattern)) {\n            params[pattern.substring(1)] = uriArray[i]\n        }\n    })\n    return params\n}\n\nexport function patternToRegExp(pattern) {\n    if (pattern) {\n        return new RegExp('^(|/)' + pattern.replace(/:[^\\s/]+/g, '([\\\\w\\u00C0-\\u00D6\\u00D8-\\u00f6\\u00f8-\\u00ff-]+)') + '(|/)$');\n    } else {\n        return new RegExp('(^$|^/$)');\n    }\n}\n\nexport function testRoute(uri, pattern) {\n    if (patternToRegExp(pattern).test(uri)) {\n        return true;\n    }\n}", "import { parseParams, parseQuery, testRoute } from './utility/router-utility';\n\nexport function router(base) {\n    return class extends base {\n        static get properties() {\n            return {\n                route: { type: String, reflect: true, attribute: 'route' },\n                canceled: { type: Boolean }\n            };\n        }\n\n        constructor(...args) {\n            super(...args);\n\n            this.route = '';\n            this.canceled = false;\n        }\n\n        connectedCallback(...args) {\n            super.connectedCallback(...args);\n\n            // @ts-ignore\n            this.routing(this.constructor.routes, (...args) => this.router(...args));\n            window.addEventListener('route', () => {\n                // @ts-ignore\n                this.routing(this.constructor.routes, (...args) => this.router(...args));\n            })\n\n            window.onpopstate = () => {\n                window.dispatchEvent(new CustomEvent('route'));\n            }\n        }\n\n        routed(name, params, query, data, callback, localCallback) {\n            localCallback && localCallback(name, params, query, data);\n            callback(name, params, query, data);\n        }\n\n        routing(routes, callback) {\n            this.canceled = true;\n\n            const uri = decodeURI(window.location.pathname);\n            const querystring = decodeURI(window.location.search);\n\n            let notFoundRoute = routes.filter(route => route.pattern === '*')[0];\n            let activeRoute = routes.filter(route => route.pattern !== '*' && testRoute(uri, route.pattern))[0];\n            let query = parseQuery(querystring);\n\n            if (activeRoute) {\n                activeRoute.params = parseParams(activeRoute.pattern, uri);\n                activeRoute.data = activeRoute.data || {};\n                if (activeRoute.authentication && activeRoute.authentication.authenticate && typeof activeRoute.authentication.authenticate === 'function') {\n                    this.canceled = false;\n                    Promise.resolve(activeRoute.authentication.authenticate.bind(this).call())\n                        .then((authenticated) => {\n                            if (!this.canceled) {\n                                if (authenticated) {\n                                    if (activeRoute.authorization && activeRoute.authorization.authorize && typeof activeRoute.authorization.authorize === 'function') {\n                                        this.canceled = false;\n                                        Promise.resolve(activeRoute.authorization.authorize.bind(this).call())\n                                            .then((authorizatied) => {\n                                                if (!this.canceled) {\n                                                    if (authorizatied) {\n                                                        this.routed(activeRoute.name, activeRoute.params, query, activeRoute.data, callback, activeRoute.callback);\n                                                    } else {\n                                                        this.routed(activeRoute.authorization.unauthorized.name, activeRoute.params, query, activeRoute.data, callback, activeRoute.callback);\n                                                    }\n                                                }\n                                            })\n                                    } else {\n                                        this.routed(activeRoute.name, activeRoute.params, query, activeRoute.data, callback, activeRoute.callback);\n                                    }\n                                } else {\n                                    this.routed(activeRoute.authentication.unauthenticated.name, activeRoute.params, query, activeRoute.data, callback, activeRoute.callback);\n                                }\n                            }\n                        })\n                } else if (activeRoute.authorization && activeRoute.authorization.authorize && typeof activeRoute.authorization.authorize === 'function') {\n                    this.canceled = false;\n                    Promise.resolve(activeRoute.authorization.authorize.bind(this).call())\n                        .then((authorizatied) => {\n                            if (!this.canceled) {\n                                if (authorizatied) {\n                                    this.routed(activeRoute.name, activeRoute.params, query, activeRoute.data, callback, activeRoute.callback);\n                                } else {\n                                    this.routed(activeRoute.authorization.unauthorized.name, activeRoute.params, query, activeRoute.data, callback, activeRoute.callback);\n                                }\n                            }\n                        })\n                } else {\n                    this.routed(activeRoute.name, activeRoute.params, query, activeRoute.data, callback, activeRoute.callback);\n                }\n            } else if (notFoundRoute) {\n                notFoundRoute.data = notFoundRoute.data || {};\n                this.routed(notFoundRoute.name, {}, query, notFoundRoute.data, callback, notFoundRoute.callback);\n            }\n        }\n    };\n}\n\nexport function navigator(base) {\n    return class extends base {\n        navigate(href) {\n            window.history.pushState({}, null, href);\n            window.dispatchEvent(new CustomEvent('route'));\n        }\n    };\n}\n\nexport function outlet(base) {\n    return class extends base {\n\n        static get properties() {\n            return {\n                activeRoute: { type: String, reflect: true, attribute: 'active-route' }\n            };\n        }\n\n        attributeChangedCallback(...args) {\n            super.attributeChangedCallback(...args);\n\n            args.some(arg => arg === 'active-route') && this.outlet();\n        }\n\n        connectedCallback(...args) {\n            super.connectedCallback(...args);\n\n            setTimeout(() => {\n                this.outlet();\n            });\n        }\n\n        outlet() {\n            Array.from(this.querySelectorAll(`[route]`)).map((active) => {\n                active.style.display = \"none\";\n            });\n            Array.from(this.shadowRoot.querySelectorAll(`[route]`)).map((active) => {\n                active.style.display = \"none\";\n            });\n            if (this.activeRoute) {\n                Array.from(this.querySelectorAll(`[route~=${this.activeRoute}]`)).map((active) => {\n                    active.style.display = \"\";\n                });\n                Array.from(this.shadowRoot.querySelectorAll(`[route~=${this.activeRoute}]`)).map((active) => {\n                    active.style.display = \"\";\n                });\n            }\n        }\n    };\n}\n"],
  "mappings": "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",
  "names": []
}
