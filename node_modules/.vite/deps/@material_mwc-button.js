import {
  RippleHandlers
} from "./chunk-SXSUOAVG.js";
import {
  ifDefined
} from "./chunk-7HFWFKW7.js";
import {
  __decorate,
  classMap
} from "./chunk-K3OMBPZJ.js";
import "./chunk-U67UUIIQ.js";
import {
  customElement,
  eventOptions,
  property,
  query,
  queryAsync,
  state
} from "./chunk-T7WKPCUD.js";
import {
  LitElement,
  html
} from "./chunk-IUEDBVQM.js";
import "./chunk-KTZKXPFA.js";

// node_modules/@material/mwc-icon/mwc-icon.js
import { styles } from "/home/euge/Documentos/Pasant\xEDa/Chatbot/Lista Blanca/whitelist-front/node_modules/@material/mwc-icon/mwc-icon-host.css.js";
var Icon = class Icon2 extends LitElement {
  render() {
    return html`<span><slot></slot></span>`;
  }
};
Icon.styles = [styles];
Icon = __decorate([
  customElement("mwc-icon")
], Icon);

// node_modules/@material/mwc-base/aria-property.js
function tsDecorator(prototype, name, descriptor) {
  const constructor = prototype.constructor;
  if (!descriptor) {
    const litInternalPropertyKey = `__${name}`;
    descriptor = constructor.getPropertyDescriptor(name, litInternalPropertyKey);
    if (!descriptor) {
      throw new Error("@ariaProperty must be used after a @property decorator");
    }
  }
  const propDescriptor = descriptor;
  let attribute = "";
  if (!propDescriptor.set) {
    throw new Error(`@ariaProperty requires a setter for ${name}`);
  }
  if (prototype.dispatchWizEvent) {
    return descriptor;
  }
  const wrappedDescriptor = {
    configurable: true,
    enumerable: true,
    set(value) {
      if (attribute === "") {
        const options = constructor.getPropertyOptions(name);
        attribute = typeof options.attribute === "string" ? options.attribute : name;
      }
      if (this.hasAttribute(attribute)) {
        this.removeAttribute(attribute);
      }
      propDescriptor.set.call(this, value);
    }
  };
  if (propDescriptor.get) {
    wrappedDescriptor.get = function() {
      return propDescriptor.get.call(this);
    };
  }
  return wrappedDescriptor;
}
function ariaProperty(protoOrDescriptor, name, descriptor) {
  if (name !== void 0) {
    return tsDecorator(protoOrDescriptor, name, descriptor);
  } else {
    throw new Error("@ariaProperty only supports TypeScript Decorators");
  }
}

// node_modules/@material/mwc-button/mwc-button-base.js
var ButtonBase = class extends LitElement {
  constructor() {
    super(...arguments);
    this.raised = false;
    this.unelevated = false;
    this.outlined = false;
    this.dense = false;
    this.disabled = false;
    this.trailingIcon = false;
    this.fullwidth = false;
    this.icon = "";
    this.label = "";
    this.expandContent = false;
    this.shouldRenderRipple = false;
    this.rippleHandlers = new RippleHandlers(() => {
      this.shouldRenderRipple = true;
      return this.ripple;
    });
  }
  renderOverlay() {
    return html``;
  }
  renderRipple() {
    const filled = this.raised || this.unelevated;
    return this.shouldRenderRipple ? html`<mwc-ripple class="ripple" .primary="${!filled}" .disabled="${this.disabled}"></mwc-ripple>` : "";
  }
  focus() {
    const buttonElement = this.buttonElement;
    if (buttonElement) {
      this.rippleHandlers.startFocus();
      buttonElement.focus();
    }
  }
  blur() {
    const buttonElement = this.buttonElement;
    if (buttonElement) {
      this.rippleHandlers.endFocus();
      buttonElement.blur();
    }
  }
  getRenderClasses() {
    return {
      "mdc-button--raised": this.raised,
      "mdc-button--unelevated": this.unelevated,
      "mdc-button--outlined": this.outlined,
      "mdc-button--dense": this.dense
    };
  }
  render() {
    return html`
      <button
          id="button"
          class="mdc-button ${classMap(this.getRenderClasses())}"
          ?disabled="${this.disabled}"
          aria-label="${this.label || this.icon}"
          aria-haspopup="${ifDefined(this.ariaHasPopup)}"
          @focus="${this.handleRippleFocus}"
          @blur="${this.handleRippleBlur}"
          @mousedown="${this.handleRippleActivate}"
          @mouseenter="${this.handleRippleMouseEnter}"
          @mouseleave="${this.handleRippleMouseLeave}"
          @touchstart="${this.handleRippleActivate}"
          @touchend="${this.handleRippleDeactivate}"
          @touchcancel="${this.handleRippleDeactivate}">
        ${this.renderOverlay()}
        ${this.renderRipple()}
        <span class="leading-icon">
          <slot name="icon">
            ${this.icon && !this.trailingIcon ? this.renderIcon() : ""}
          </slot>
        </span>
        <span class="mdc-button__label">${this.label}</span>
        <span class="slot-container ${classMap({
      flex: this.expandContent
    })}">
          <slot></slot>
        </span>
        <span class="trailing-icon">
          <slot name="trailingIcon">
            ${this.icon && this.trailingIcon ? this.renderIcon() : ""}
          </slot>
        </span>
      </button>`;
  }
  renderIcon() {
    return html`
    <mwc-icon class="mdc-button__icon">
      ${this.icon}
    </mwc-icon>`;
  }
  handleRippleActivate(evt) {
    const onUp = () => {
      window.removeEventListener("mouseup", onUp);
      this.handleRippleDeactivate();
    };
    window.addEventListener("mouseup", onUp);
    this.rippleHandlers.startPress(evt);
  }
  handleRippleDeactivate() {
    this.rippleHandlers.endPress();
  }
  handleRippleMouseEnter() {
    this.rippleHandlers.startHover();
  }
  handleRippleMouseLeave() {
    this.rippleHandlers.endHover();
  }
  handleRippleFocus() {
    this.rippleHandlers.startFocus();
  }
  handleRippleBlur() {
    this.rippleHandlers.endFocus();
  }
};
ButtonBase.shadowRootOptions = { mode: "open", delegatesFocus: true };
__decorate([
  ariaProperty,
  property({ type: String, attribute: "aria-haspopup" })
], ButtonBase.prototype, "ariaHasPopup", void 0);
__decorate([
  property({ type: Boolean, reflect: true })
], ButtonBase.prototype, "raised", void 0);
__decorate([
  property({ type: Boolean, reflect: true })
], ButtonBase.prototype, "unelevated", void 0);
__decorate([
  property({ type: Boolean, reflect: true })
], ButtonBase.prototype, "outlined", void 0);
__decorate([
  property({ type: Boolean })
], ButtonBase.prototype, "dense", void 0);
__decorate([
  property({ type: Boolean, reflect: true })
], ButtonBase.prototype, "disabled", void 0);
__decorate([
  property({ type: Boolean, attribute: "trailingicon" })
], ButtonBase.prototype, "trailingIcon", void 0);
__decorate([
  property({ type: Boolean, reflect: true })
], ButtonBase.prototype, "fullwidth", void 0);
__decorate([
  property({ type: String })
], ButtonBase.prototype, "icon", void 0);
__decorate([
  property({ type: String })
], ButtonBase.prototype, "label", void 0);
__decorate([
  property({ type: Boolean })
], ButtonBase.prototype, "expandContent", void 0);
__decorate([
  query("#button")
], ButtonBase.prototype, "buttonElement", void 0);
__decorate([
  queryAsync("mwc-ripple")
], ButtonBase.prototype, "ripple", void 0);
__decorate([
  state()
], ButtonBase.prototype, "shouldRenderRipple", void 0);
__decorate([
  eventOptions({ passive: true })
], ButtonBase.prototype, "handleRippleActivate", null);

// node_modules/@material/mwc-button/mwc-button.js
import { styles as styles2 } from "/home/euge/Documentos/Pasant\xEDa/Chatbot/Lista Blanca/whitelist-front/node_modules/@material/mwc-button/styles.css.js";
var Button = class Button2 extends ButtonBase {
};
Button.styles = [styles2];
Button = __decorate([
  customElement("mwc-button")
], Button);
export {
  Button
};
/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
//# sourceMappingURL=@material_mwc-button.js.map
