import {
  FormElement
} from "./chunk-GJYAMR2D.js";
import {
  observer
} from "./chunk-LZB3YDLX.js";
import {
  BaseElement,
  MDCFoundation,
  __assign,
  __decorate,
  __extends,
  classMap
} from "./chunk-HOADCTOB.js";
import {
  customElement,
  property,
  query,
  queryAssignedNodes
} from "./chunk-T7WKPCUD.js";
import "./chunk-U67UUIIQ.js";
import {
  html
} from "./chunk-IUEDBVQM.js";
import "./chunk-KTZKXPFA.js";

// node_modules/@material/form-field/constants.js
var cssClasses = {
  ROOT: "mdc-form-field"
};
var strings = {
  LABEL_SELECTOR: ".mdc-form-field > label"
};

// node_modules/@material/form-field/foundation.js
var MDCFormFieldFoundation = function(_super) {
  __extends(MDCFormFieldFoundation2, _super);
  function MDCFormFieldFoundation2(adapter) {
    var _this = _super.call(this, __assign(__assign({}, MDCFormFieldFoundation2.defaultAdapter), adapter)) || this;
    _this.click = function() {
      _this.handleClick();
    };
    return _this;
  }
  Object.defineProperty(MDCFormFieldFoundation2, "cssClasses", {
    get: function() {
      return cssClasses;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCFormFieldFoundation2, "strings", {
    get: function() {
      return strings;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCFormFieldFoundation2, "defaultAdapter", {
    get: function() {
      return {
        activateInputRipple: function() {
          return void 0;
        },
        deactivateInputRipple: function() {
          return void 0;
        },
        deregisterInteractionHandler: function() {
          return void 0;
        },
        registerInteractionHandler: function() {
          return void 0;
        }
      };
    },
    enumerable: false,
    configurable: true
  });
  MDCFormFieldFoundation2.prototype.init = function() {
    this.adapter.registerInteractionHandler("click", this.click);
  };
  MDCFormFieldFoundation2.prototype.destroy = function() {
    this.adapter.deregisterInteractionHandler("click", this.click);
  };
  MDCFormFieldFoundation2.prototype.handleClick = function() {
    var _this = this;
    this.adapter.activateInputRipple();
    requestAnimationFrame(function() {
      _this.adapter.deactivateInputRipple();
    });
  };
  return MDCFormFieldFoundation2;
}(MDCFoundation);
var foundation_default = MDCFormFieldFoundation;

// node_modules/@material/mwc-formfield/mwc-formfield-base.js
var FormfieldBase = class extends BaseElement {
  constructor() {
    super(...arguments);
    this.alignEnd = false;
    this.spaceBetween = false;
    this.nowrap = false;
    this.label = "";
    this.mdcFoundationClass = foundation_default;
  }
  createAdapter() {
    return {
      registerInteractionHandler: (type, handler) => {
        this.labelEl.addEventListener(type, handler);
      },
      deregisterInteractionHandler: (type, handler) => {
        this.labelEl.removeEventListener(type, handler);
      },
      activateInputRipple: async () => {
        const input = this.input;
        if (input instanceof FormElement) {
          const ripple = await input.ripple;
          if (ripple) {
            ripple.startPress();
          }
        }
      },
      deactivateInputRipple: async () => {
        const input = this.input;
        if (input instanceof FormElement) {
          const ripple = await input.ripple;
          if (ripple) {
            ripple.endPress();
          }
        }
      }
    };
  }
  get input() {
    var _a, _b;
    return (_b = (_a = this.slottedInputs) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : null;
  }
  render() {
    const classes = {
      "mdc-form-field--align-end": this.alignEnd,
      "mdc-form-field--space-between": this.spaceBetween,
      "mdc-form-field--nowrap": this.nowrap
    };
    return html`
      <div class="mdc-form-field ${classMap(classes)}">
        <slot></slot>
        <label class="mdc-label"
               @click="${this._labelClick}">${this.label}</label>
      </div>`;
  }
  click() {
    this._labelClick();
  }
  _labelClick() {
    const input = this.input;
    if (input) {
      input.focus();
      input.click();
    }
  }
};
__decorate([
  property({ type: Boolean })
], FormfieldBase.prototype, "alignEnd", void 0);
__decorate([
  property({ type: Boolean })
], FormfieldBase.prototype, "spaceBetween", void 0);
__decorate([
  property({ type: Boolean })
], FormfieldBase.prototype, "nowrap", void 0);
__decorate([
  property({ type: String }),
  observer(async function(label) {
    var _a;
    (_a = this.input) === null || _a === void 0 ? void 0 : _a.setAttribute("aria-label", label);
  })
], FormfieldBase.prototype, "label", void 0);
__decorate([
  query(".mdc-form-field")
], FormfieldBase.prototype, "mdcRoot", void 0);
__decorate([
  queryAssignedNodes("", true, "*")
], FormfieldBase.prototype, "slottedInputs", void 0);
__decorate([
  query("label")
], FormfieldBase.prototype, "labelEl", void 0);

// node_modules/@material/mwc-formfield/mwc-formfield.js
import { styles } from "/home/euge/Documentos/Pasant\xEDa/Chatbot/Lista Blanca/whitelist-front/node_modules/@material/mwc-formfield/mwc-formfield.css.js";
var Formfield = class Formfield2 extends FormfieldBase {
};
Formfield.styles = [styles];
Formfield = __decorate([
  customElement("mwc-formfield")
], Formfield);
export {
  Formfield
};
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
//# sourceMappingURL=@material_mwc-formfield.js.map
